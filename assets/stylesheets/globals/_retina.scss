// THIS FILE IS DEPRECATED WITH THE NEW COMPASS

// This file is used to generate a retina sprite with all the appropriate 
// styling and layout

// helper function to return dimensions of sprite map for use with retina sprites
@function retina-dimensions($map, $sprites) {
  $width: 0px;
  $height: 0px;

  $sprite-classes: ();

  // calculate width and height of sprite map
  @each $sprite in $sprites {
    $sprite-pos: sprite-position($map, $sprite);
    $x: image-width(sprite-file($map, $sprite)) - nth($sprite-pos, 1);
    $y: image-height(sprite-file($map, $sprite)) - nth($sprite-pos, 2);
    @if $x > $width {
      $width: $x;
    }
    @if $y > $height {
      $height: $y;
    }
  }
  
  @return $width/2 $height/2;
}

// retina version of http://compass-style.org/reference/compass/helpers/sprites/#sprite-position
@function retina-position($map, $sprite, $offset-x: 0, $offset-y: 0) {
  $sprite-pos: sprite-position($map, $sprite);
  $x: nth($sprite-pos, 1);
  $y: nth($sprite-pos, 2);
  
  // emulate sprite-background-position()
  $retina-x: $offset-x;
  $retina-y: $offset-y;
  @if unit($offset-x) != "%" {
    $retina-x: $x/2 + $offset-x;
  }
  @if unit($offset-y) != "%" {
    $retina-y: $y/2 + $offset-y;
  }
  @return $retina-x $retina-y;
}

// retina version of http://compass-style.org/reference/compass/helpers/sprites/#sprite
@function retina-sprite($map, $sprite, $offset-x: 0, $offset-y: 0) {
  $sprite-pos: sprite-position($map, $sprite);
  $x: nth($sprite-pos, 1);
  $y: nth($sprite-pos, 2);
  
  // emulate sprite-background-position()
  $retina-x: $offset-x;
  $retina-y: $offset-y;
  @if unit($offset-x) != "%" {
    $retina-x: $x/2 + $offset-x;
  }
  @if unit($offset-y) != "%" {
    $retina-y: $y/2 + $offset-y;
  }
  @return $map $retina-x $retina-y;
}

// retina version of http://compass-style.org/reference/compass/utilities/sprites/base/#mixin-sprite-background-position
@mixin retina-background-position($map, $sprite, $offset-x: 0, $offset-y: 0) {
  background-position: retina-position($map, $sprite, $offset-x, $offset-y);
}

@mixin retina-sprites($map, $all-sprites, $params) {
  $sprite-classes: ();
  
  // calculate width and height of sprite map
  @each $param in $params {
    $sprite: nth($param, 1);
    $sprite-classes: join($sprite-classes, #{"."}sprite-map-name($map)-$sprite, comma);
    $param: join($param, 0px 0px);
    $offset-x: nth($param, 2);
    $offset-y: nth($param, 3);

    // adjust sprite's background position
    .#{sprite-map-name($map)-$sprite} {
      background-position: retina-position($map, $sprite, $offset-x, $offset-y);
    }
  }

  #{$sprite-classes} {
    @include background-size(retina-dimensions($map, $all-sprites));
  }
}

// usage example: @include all-retina-sprites($icons-sprites, icon1 icon2 (icon3 offset-x offset-y) (icon4 offset-x));
@mixin all-retina-sprites($map, $params) {
  $all-sprites: ();
  
  @each $param in $params {
    $all-sprites: join($all-sprites, nth($param, 1));
  }
  
  @include retina-sprites($map, $all-sprites, $params);
}